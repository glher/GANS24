import tls.filter_functions as ff

filters = {
    'SMR4': {
        'landslides': {'path': 'Landslides/landslides.tif',
                       'condition': 2,
                       'function': ff.avoidance_condition},
        'seismic': {'path': 'Seismic/openquake_pga.tif',
                    'condition': 0.5,
                    'function': ff.get_seismic},
        'flood': {'path': 'Flood/floodplain100y.tif',
                  'condition': 0.1,
                  'function': ff.avoidance_condition},
        'protected_areas': {'path': 'ProtectedAreas/protected_areas.tif',
                            'condition': 0.,
                            'function': ff.avoidance_condition},
        'wetlands': {'path': 'Wetlands/wetlands.tif',
                     'condition': 0.,
                     'function': ff.avoidance_condition},
        'population': {'path': 'Population/rings2019/upto/population_upto_ring7.tif',
                       'condition': 200.,
                       'function': ff.avoidance_condition},
        'proliferation': {'path': 'Proliferation/cumul_levels_conflict_nonuke.tif',
                     'condition': 51.19,
                     'function': ff.avoidance_condition},
        'conflicts': {'path': 'Conflicts/ged211_2016_2020_convex_clusters.tif',
                      'condition': 0.9,
                      'function': ff.avoidance_condition},
        'governance_rl': {'path': 'Governance/relUKR/rulelaw.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_co': {'path': 'Governance/relUKR/corrupt.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_rq': {'path': 'Governance/relUKR/regulq.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_ge': {'path': 'Governance/relUKR/goveff.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_al': {'path': 'Governance/relUKR/combined.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'land': {'path': 'Land/available_land.tif',
                 'condition': 0.,
                 'function': ff.get_land},
        'rivers': {'path': 'Water/Rivers/FLO1K_2000_2015_r34.tif',
                   'condition': 0.39,
                   'function': ff.invert_condition},
        'shores': {'path': 'Water/Shores/shores_disavg_10k.tif',
                   'condition': 0.39,
                   'function': ff.invert_condition}
        },
    'MMR1': {
        'landslides': {'path': 'Landslides/landslides.tif',
                       'condition': 2,
                       'function': ff.avoidance_condition},
        'seismic': {'path': 'Seismic/openquake_pga.tif',
                    'condition': 0.5,
                    'function': ff.get_seismic},
        'flood': {'path': 'Flood/floodplain100y.tif',
                  'condition': 0.1,
                  'function': ff.avoidance_condition},
        'protected_areas': {'path': 'ProtectedAreas/protected_areas.tif',
                            'condition': 0.,
                            'function': ff.avoidance_condition},
        'wetlands': {'path': 'Wetlands/wetlands.tif',
                     'condition': 0.,
                     'function': ff.avoidance_condition},
        'population': {'path': 'Population/population2019.tif',
                       'condition': 200,
                       'function': ff.avoidance_condition},
        'proliferation': {'path': 'Proliferation/cumul_levels_conflict_nonuke.tif',
                     'condition': 51.19,
                     'function': ff.avoidance_condition},
        'conflicts': {'path': 'Conflicts/ged211_2016_2020_convex_clusters.tif',
                      'condition': 0.9,
                      'function': ff.avoidance_condition},
        'governance_rl': {'path': 'Governance/relUKR/rulelaw.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_co': {'path': 'Governance/relUKR/corrupt.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_rq': {'path': 'Governance/relUKR/regulq.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_ge': {'path': 'Governance/relUKR/goveff.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_al': {'path': 'Governance/relUKR/combined.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'land': {'path': 'Land/available_land.tif',
                 'condition': 0.,
                 'function': ff.get_land},
        'rivers': {'path': 'Water/Rivers/FLO1K_2000_2015_r34.tif',
                   'condition': 0.15,
                   'function': ff.invert_condition},
        'shores': {'path': 'Water/Shores/shores_disavg_10k.tif',
                   'condition': 0.15,
                   'function': ff.invert_condition}
        },
    'MMR2': {
        'landslides': {'path': 'Landslides/landslides.tif',
                       'condition': 2,
                       'function': ff.avoidance_condition},
        'seismic': {'path': 'Seismic/openquake_pga.tif',
                    'condition': 0.5,
                    'function': ff.get_seismic},
        'flood': {'path': 'Flood/floodplain100y.tif',
                  'condition': 0.1,
                  'function': ff.avoidance_condition},
        'protected_areas': {'path': 'ProtectedAreas/protected_areas.tif',
                            'condition': 0.,
                            'function': ff.avoidance_condition},
        'wetlands': {'path': 'Wetlands/wetlands.tif',
                     'condition': 0.,
                     'function': ff.avoidance_condition},
        'population': {'path': 'Population/population2019.tif',
                       'condition': 200,
                       'function': ff.avoidance_condition},
        'proliferation': {'path': 'Proliferation/cumul_levels_conflict_nonuke.tif',
                     'condition': 51.19,
                     'function': ff.avoidance_condition},
        'conflicts': {'path': 'Conflicts/ged211_2016_2020_convex_clusters.tif',
                      'condition': 0.9,
                      'function': ff.avoidance_condition},
        'governance_rl': {'path': 'Governance/relUKR/rulelaw.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_co': {'path': 'Governance/relUKR/corrupt.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_rq': {'path': 'Governance/relUKR/regulq.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_ge': {'path': 'Governance/relUKR/goveff.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_al': {'path': 'Governance/relUKR/combined.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'land': {'path': 'Land/available_land.tif',
                 'condition': 0.,
                 'function': ff.get_land},
        'rivers': {'path': 'Water/Rivers/FLO1K_2000_2015_r34.tif',
                   'condition': 0.08,
                   'function': ff.invert_condition},
        'shores': {'path': 'Water/Shores/shores_disavg_10k.tif',
                   'condition': 0.08,
                   'function': ff.invert_condition}
        },
    'MMR3': {
        'landslides': {'path': 'Landslides/landslides.tif',
                       'condition': 2,
                       'function': ff.avoidance_condition},
        'seismic': {'path': 'Seismic/openquake_pga.tif',
                    'condition': 0.5,
                    'function': ff.get_seismic},
        'flood': {'path': 'Flood/floodplain100y.tif',
                  'condition': 0.1,
                  'function': ff.avoidance_condition},
        'protected_areas': {'path': 'ProtectedAreas/protected_areas.tif',
                            'condition': 0.,
                            'function': ff.avoidance_condition},
        'wetlands': {'path': 'Wetlands/wetlands.tif',
                     'condition': 0.,
                     'function': ff.avoidance_condition},
        'population': {'path': 'Population/population2019.tif',
                       'condition': 5000,
                       'function': ff.avoidance_condition},
        'proliferation': {'path': 'Proliferation/cumul_levels_conflict_nonuke.tif',
                     'condition': 51.19,
                     'function': ff.avoidance_condition},
        'conflicts': {'path': 'Conflicts/ged211_2016_2020_convex_clusters.tif',
                      'condition': 0.9,
                      'function': ff.avoidance_condition},
        'governance_rl': {'path': 'Governance/relUKR/rulelaw.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_co': {'path': 'Governance/relUKR/corrupt.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_rq': {'path': 'Governance/relUKR/regulq.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_ge': {'path': 'Governance/relUKR/goveff.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'governance_al': {'path': 'Governance/relUKR/combined.tif',
                          'condition': 0.9,
                          'function': ff.avoidance_condition},
        'land': {'path': 'Land/available_land.tif',
                 'condition': 0.,
                 'function': ff.get_land},
        'rivers': {'path': 'Water/Rivers/FLO1K_2000_2015_r34.tif',
                   'condition': 0.008,
                   'function': ff.invert_condition},
        'shores': {'path': 'Water/Shores/shores_disavg_10k.tif',
                   'condition': 0.008,
                   'function': ff.invert_condition}
        }
}

filters_list = {
    'SMR4': ['landslides', 'seismic', 'flood', 'protected_areas', 'wetlands', 'population',
             'rivers', 'shores', 'land'],
    'MMR1': ['landslides', 'seismic', 'flood', 'protected_areas', 'wetlands', 'population',
             'rivers', 'shores', 'land'],
    'MMR2': ['landslides', 'seismic', 'flood', 'protected_areas', 'wetlands', 'population',
             'rivers', 'shores', 'land'],
    'MMR3': ['landslides', 'seismic', 'flood', 'protected_areas', 'wetlands', 'population',
             'rivers', 'shores', 'land']
    }

powers = {'SMR4': 50.,
          'MMR1': 20.,
          'MMR2': 10.,
          'MMR3': 1.}

capacity_factors = {'SMR4': 0.92,
                    'MMR1': 0.92,
                    'MMR2': 0.92,
                    'MMR3': 0.92}

service_areas = {'SMR4': 55,
                 'MMR1': 35,
                 'MMR2': 25,
                 'MMR3': 8}

combinations = [('rivers', 'shores', 'water')]

tier = 5
tier_need_per_capita = {5: 3.0}  # MWh

upper_service = 1.5

countries = ['ZWE', 'ZMB', 'YEM', 'VNM', 'VUT', 'URY', 'FSM', 'MHL', 'UGA', 'TKM', 'TON', 'TGO',
             'TLS', 'THA', 'TZA', 'TJK', 'SYR', 'SWZ', 'SUR', 'SDS', 'SDN', 'ZAF', 'SOM', 'SOL',
             'SLB', 'SLE', 'SRB', 'SEN', 'STP', 'WSM', 'LCA', 'RWA', 'PHL', 'PER', 'PNG', 'PAN',
             'PAK', 'PRK', 'NGA', 'NER', 'NIC', 'NPL', 'NAM', 'MOZ', 'MAR', 'SAH', 'MNG', 'MRT',
             'MLI', 'MWI', 'MDG', 'LBY', 'LBR', 'LSO', 'KGZ', 'KEN', 'JAM', 'IDN', 'IND', 'HND',
             'HTI', 'GUY', 'GNB', 'GIN', 'GTM', 'GRD', 'GHA', 'GMB', 'GAB', 'ETH', 'ERI', 'GNQ',
             'DJI', 'CUB', 'CIV', 'CRI', 'COD', 'COG', 'COM', 'COL', 'TCD', 'CAF', 'CPV', 'CMR',
             'KHM', 'MMR', 'BDI', 'BFA', 'BRA', 'BWA', 'BOL', 'BEN', 'BLZ', 'BGD', 'AGO', 'DZA',
             'AFG']

cooling_modes = ['CT']
cooling_name = {'OC': 'Once-Through',
                'CT': 'Cooling Tower'}